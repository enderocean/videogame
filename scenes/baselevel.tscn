[gd_scene load_steps=17 format=2]

[ext_resource path="res://assets/defaultEnvironment.tres" type="Environment" id=1]
[ext_resource path="res://scripts/baselevel.gd" type="Script" id=2]
[ext_resource path="res://scripts/targetPos.gd" type="Script" id=3]
[ext_resource path="res://scripts/InterpolatedCamera.gd" type="Script" id=4]
[ext_resource path="res://scripts/ui/settings.gd" type="Script" id=5]
[ext_resource path="res://scenes/bluerovheavy/BlueRovHeavy.tscn" type="PackedScene" id=6]
[ext_resource path="res://scripts/Ping360Viewport.gd" type="Script" id=7]
[ext_resource path="res://scenes/components/ping360.shader" type="Shader" id=8]
[ext_resource path="res://assets/fonts/Roboto/Roboto-Bold.ttf" type="DynamicFontData" id=9]
[ext_resource path="res://scripts/mission_timer.gd" type="Script" id=10]
[ext_resource path="res://scenes/rope/rope.gd" type="Script" id=12]

[sub_resource type="GDScript" id=1]
script/source = "# Licensed under the MIT License.
# Copyright (c) 2018-2020 Jaccomo Lorenz (Maujoe)

extends Spatial

# User settings:
# General settings
export var enabled = true setget set_enabled

# See https://docs.godotengine.org/en/latest/classes/class_input.html?highlight=Input#enumerations
export(int, \"Visible\", \"Hidden\", \"Captured, Confined\") var mouse_mode = Input.MOUSE_MODE_CAPTURED

enum Freelook_Modes {MOUSE, INPUT_ACTION, MOUSE_AND_INPUT_ACTION}

# Freelook settings
export var freelook = true
export (Freelook_Modes) var freelook_mode = 2
export (float, 0.0, 1.0) var sensitivity = 0.5
export (float, 0.0, 0.999, 0.001) var smoothness = 0.5 setget set_smoothness
export (int, 0, 360) var yaw_limit = 360
export (int, 0, 360) var pitch_limit = 360

# Pivot Settings
export(NodePath) var privot setget set_privot
export var distance = 5.0 setget set_distance
export var rotate_privot = false
export var collisions = true setget set_collisions

# Movement settings
export var movement = true
export (float, 0.0, 5.0) var acceleration = 5.0
export (float, 0.0, 0.0, 1.0) var deceleration = 0.1
export var max_speed = Vector3(15.0, 15.0, 15.0)
export var local = true

# Input Actions
export var rotate_left_action = \"\"
export var rotate_right_action = \"\"
export var rotate_up_action = \"\"
export var rotate_down_action = \"\"
export var forward_action = \"player_up\"
export var backward_action = \"player_down\"
export var left_action = \"player_left\"
export var right_action = \"player_right\"
export var up_action = \"camera_upwards\"
export var down_action = \"camera_downwards\"
export var trigger_action = \"camera_trigger\"

# Gui settings
export var use_gui = true
export var gui_action = \"ui_cancel\"

# Intern variables.
var _mouse_offset = Vector2()
var _rotation_offset = Vector2()
var _yaw = 0.0
var _pitch = 0.0
var _total_yaw = 0.0
var _total_pitch = 0.0

var _direction = Vector3(0.0, 0.0, 0.0)
var _speed = Vector3(0.0, 0.0, 0.0)
var _gui

var _triggered=false

const ROTATION_MULTIPLIER = 500

func _ready():
	_check_actions([
		forward_action,
		backward_action,
		left_action,
		right_action,
		gui_action,
		up_action,
		down_action,
		rotate_left_action,
		rotate_right_action,
		rotate_up_action,
		rotate_down_action
	])

	if privot:
		privot = get_node(privot)
	else:
		privot = null

	set_enabled(enabled)


func _input(event):
		if len(trigger_action)!=0:
			if event.is_action_pressed(trigger_action):
				_triggered=true
			elif event.is_action_released(trigger_action):
				_triggered=false
		else:
			_triggered=true
		if freelook and _triggered:
			if event is InputEventMouseMotion:
				_mouse_offset = event.relative
				
#			_rotation_offset.x = Input.get_action_strength(rotate_right_action) - Input.get_action_strength(rotate_left_action)
#			_rotation_offset.y = Input.get_action_strength(rotate_down_action) - Input.get_action_strength(rotate_up_action)
	
		if movement and _triggered:
			_direction.x = Input.get_action_strength(right_action) - Input.get_action_strength(left_action)
			_direction.y = Input.get_action_strength(up_action) - Input.get_action_strength(down_action)
			_direction.z = Input.get_action_strength(backward_action) - Input.get_action_strength(forward_action)

func _process(delta):
	if _triggered:
		_update_views(delta)

func _update_views(delta):
	if privot:
		_update_distance()
	if freelook:
		_update_rotation(delta)
	if movement:
		_update_movement(delta)

func _physics_process(delta):
	if _triggered:
		_update_views_physics(delta)

func _update_views_physics(delta):
	# Called when collision are enabled
	_update_distance()
	if freelook:
		_update_rotation(delta)

	var space_state = get_world().get_direct_space_state()
	var obstacle = space_state.intersect_ray(privot.get_translation(),  get_translation())
	if not obstacle.empty():
		set_translation(obstacle.position)

func _update_movement(delta):
	var offset = max_speed * acceleration * _direction

	_speed.x = clamp(_speed.x + offset.x, -max_speed.x, max_speed.x)
	_speed.y = clamp(_speed.y + offset.y, -max_speed.y, max_speed.y)
	_speed.z = clamp(_speed.z + offset.z, -max_speed.z, max_speed.z)

	# Apply deceleration if no input
	if _direction.x == 0:
		_speed.x *= (1.0 - deceleration)
	if _direction.y == 0:
		_speed.y *= (1.0 - deceleration)
	if _direction.z == 0:
		_speed.z *= (1.0 - deceleration)

	if local:
		translate(_speed * delta)
	else:
		global_translate(_speed * delta)

func _update_rotation(delta):
	var offset = Vector2();
	
	if not freelook_mode == Freelook_Modes.INPUT_ACTION:
		offset += _mouse_offset * sensitivity
	if not freelook_mode == Freelook_Modes.MOUSE: 
		offset += _rotation_offset * sensitivity * ROTATION_MULTIPLIER * delta
	
	_mouse_offset = Vector2()

	_yaw = _yaw * smoothness + offset.x * (1.0 - smoothness)
	_pitch = _pitch * smoothness + offset.y * (1.0 - smoothness)

	if yaw_limit < 360:
		_yaw = clamp(_yaw, -yaw_limit - _total_yaw, yaw_limit - _total_yaw)
	if pitch_limit < 360:
		_pitch = clamp(_pitch, -pitch_limit - _total_pitch, pitch_limit - _total_pitch)

	_total_yaw += _yaw
	_total_pitch += _pitch

	if privot:
		var target = privot.get_translation()
		var dist = get_translation().distance_to(target)

		set_translation(target)
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))
		translate(Vector3(0.0, 0.0, dist))

		if rotate_privot:
			privot.rotate_y(deg2rad(-_yaw))
	else:
		rotate_y(deg2rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg2rad(-_pitch))

func _update_distance():
	var t = privot.get_translation()
	t.z -= distance
	set_translation(t)

func _update_process_func():
	# Use physics process if collision are enabled
	if collisions and privot:
		set_physics_process(true)
		set_process(false)
	else:
		set_physics_process(false)
		set_process(true)

func _check_actions(actions=[]):
	if OS.is_debug_build():
		for action in actions:
			if not InputMap.has_action(action):
				print('WARNING: No action \"' + action + '\"')

func set_privot(value):
	privot = value
	_update_process_func()
	if len(trigger_action)!=0:
		_update_views(0)

func set_collisions(value):
	collisions = value
	_update_process_func()

func set_enabled(value):
	enabled = value
	if enabled:
		Input.set_mouse_mode(mouse_mode)
		set_process_input(true)
		_update_process_func()
	else:
		set_process(false)
		set_process_input(false)
		set_physics_process(false)

func set_smoothness(value):
	smoothness = clamp(value, 0.001, 0.999)

func set_distance(value):
	distance = max(0, value)
"

[sub_resource type="GDScript" id=3]
script/source = "extends PanelContainer


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _input(event):
	if event.is_action_pressed(\"help\"):
		if not self.is_visible():
			self.show()
		else:
			self.hide()
"

[sub_resource type="GDScript" id=4]
script/source = "extends Camera

func _process(_delta):
	self.look_at(Globals.active_vehicle.transform.origin, Vector3(0,1,0))

"

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 8 )

[sub_resource type="DynamicFont" id=6]
size = 32
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 9 )

[node name="HUD" type="Control"]
pause_mode = 2
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )

[node name="ViewportMainCamera" type="ViewportContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="Viewport" type="Viewport" parent="ViewportMainCamera"]
size = Vector2( 1024, 600 )
handle_input_locally = false
hdr = false
render_target_update_mode = 3
shadow_atlas_size = 2048
shadow_atlas_quad_1 = 3

[node name="playerCamera" type="Spatial" parent="ViewportMainCamera/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.7902, 0 )
visible = false
script = SubResource( 1 )
mouse_mode = 0

[node name="Camera" type="Camera" parent="ViewportMainCamera/Viewport/playerCamera" groups=["cameras"]]
visible = false
far = 275.0

[node name="theter" type="Spatial" parent="ViewportMainCamera/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.769269 )
script = ExtResource( 12 )
loops = 100

[node name="cameraPosition" type="Position3D" parent="ViewportMainCamera/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.21178, 10.2615, 4.21928 )
script = ExtResource( 3 )

[node name="BlueRovHeavy" parent="ViewportMainCamera/Viewport" instance=ExtResource( 6 )]

[node name="SettingsPanel" type="PanelContainer" parent="ViewportMainCamera"]
visible = false
margin_left = 251.0
margin_right = 14.0
margin_bottom = 14.0
script = ExtResource( 5 )

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportMainCamera/SettingsPanel"]
margin_left = 7.0
margin_top = 7.0
margin_right = 175.0
margin_bottom = 222.0

[node name="godrayToggle" type="CheckButton" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_right = 168.0
margin_bottom = 40.0
pressed = true
text = "GodRays"

[node name="dirtparticlesToggle" type="CheckButton" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_top = 44.0
margin_right = 168.0
margin_bottom = 84.0
pressed = true
text = "Particles"

[node name="fancyWaterToggle" type="CheckButton" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_top = 88.0
margin_right = 168.0
margin_bottom = 128.0
pressed = true
text = "Fancy Water"

[node name="Ping360Toggle" type="CheckButton" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_top = 132.0
margin_right = 168.0
margin_bottom = 172.0
text = "Ping360"

[node name="physicsRate" type="Label" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_top = 176.0
margin_right = 168.0
margin_bottom = 195.0
rect_pivot_offset = Vector2( -32, 6 )
text = "Physics (hz):"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="physicsRateSlider" type="HSlider" parent="ViewportMainCamera/SettingsPanel/VBoxContainer"]
margin_top = 199.0
margin_right = 168.0
margin_bottom = 215.0
min_value = 60.0
max_value = 500.0
value = 60.0

[node name="HelpPanel" type="PanelContainer" parent="ViewportMainCamera"]
modulate = Color( 1, 1, 1, 0.619608 )
margin_right = 250.0
margin_bottom = 334.0
script = SubResource( 3 )

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportMainCamera/HelpPanel"]
margin_left = 7.0
margin_top = 7.0
margin_right = 243.0
margin_bottom = 422.0

[node name="help" type="Label" parent="ViewportMainCamera/HelpPanel/VBoxContainer"]
margin_right = 236.0
margin_bottom = 415.0
rect_pivot_offset = Vector2( -32, 6 )
text = "H - Toggle Help (this)
ESC - Graphics settings

C - switch camera//vehicle
R - reset position

Free camera:
Hold left button + a/w/s/d + q/e

ROV:
Z/S: Forward/Backwards
A/D: Yaw left/right
Up: Rise
Down: Dive
Left/Right: Strafe left/right
L/M: Camera tilt down/up
O/P: Close/open gripper
F3/F4: Increase/decrease lights
"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportExternalCamera" type="ViewportContainer" parent="."]
pause_mode = 2
anchor_left = 1.0
anchor_right = 1.0
margin_left = -362.0
margin_bottom = 248.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true

[node name="Viewport" type="Viewport" parent="ViewportExternalCamera"]
size = Vector2( 362, 248 )
handle_input_locally = false
render_target_update_mode = 3
shadow_atlas_size = 512
shadow_atlas_quad_1 = 3

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="ViewportExternalCamera/Viewport" groups=["cameras"]]
transform = Transform( -0.995028, 0, 0.0995974, 0, 1, 0, -0.0995974, 0, -0.995028, -1.54154, 7.13712, -2.96935 )
cull_mask = 1048573
environment = ExtResource( 1 )
far = 497.4
target = NodePath("../../../ViewportMainCamera/Viewport/cameraPosition")
speed = 10.0
enabled = true
script = ExtResource( 4 )

[node name="ViewportExternalCamera2" type="ViewportContainer" parent="."]
pause_mode = 2
visible = false
anchor_left = 1.0
anchor_right = 1.0
margin_left = -1019.76
margin_top = 1.12245
margin_right = -657.763
margin_bottom = 249.122
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="ViewportExternalCamera2"]
size = Vector2( 362, 248 )
handle_input_locally = false
render_target_update_mode = 0
shadow_atlas_size = 512
shadow_atlas_quad_1 = 3

[node name="Camera" type="Camera" parent="ViewportExternalCamera2/Viewport"]
transform = Transform( -0.998367, -1.8596e-09, 0.0571282, 0.0271268, 0.880072, 0.474066, -0.0502769, 0.474841, -0.878634, 0, 14.74, 0 )
script = SubResource( 4 )

[node name="Ping360Viewport" type="ViewportContainer" parent="."]
pause_mode = 2
visible = false
material = SubResource( 5 )
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -296.0
margin_top = -265.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true
script = ExtResource( 7 )

[node name="Viewport" type="Viewport" parent="Ping360Viewport"]
size = Vector2( 296, 265 )
handle_input_locally = false
render_target_update_mode = 0
shadow_atlas_size = 512
shadow_atlas_quad_1 = 3

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="Ping360Viewport/Viewport" groups=["cameras"]]
transform = Transform( -0.995028, 0, 0.0995974, 0, 1, 0, -0.0995974, 0, -0.995028, -1.54154, 7.13712, -2.96935 )
cull_mask = 3
environment = ExtResource( 1 )
target = NodePath("../../../ViewportMainCamera/Viewport/cameraPosition")
speed = 10.0
enabled = true
script = ExtResource( 4 )

[node name="TimerLabel" type="Label" parent="."]
anchor_right = 1.0
margin_top = 25.0
margin_bottom = 59.0
custom_fonts/font = SubResource( 6 )
text = "00:00"
align = 1
valign = 1

[node name="MissionTimer" type="Timer" parent="."]
script = ExtResource( 10 )
label_path = NodePath("../TimerLabel")

[connection signal="toggled" from="ViewportMainCamera/SettingsPanel/VBoxContainer/fancyWaterToggle" to="ViewportMainCamera/SettingsPanel" method="_on_fancyWaterToggle_toggled"]
[connection signal="toggled" from="ViewportMainCamera/SettingsPanel/VBoxContainer/Ping360Toggle" to="Ping360Viewport" method="_on_Ping360Toggle_toggled"]
[connection signal="value_changed" from="ViewportMainCamera/SettingsPanel/VBoxContainer/physicsRateSlider" to="ViewportMainCamera/SettingsPanel" method="_on_HSlider_value_changed"]
